n previous chapters your code led a relatively simple life: you declared some simple constants and variables and then assigned them values. But of course, an application really comes to life – and programming becomes a bit more challenging – when the application makes decisions based on the contents of its variables. For example, a game may let players leap a tall building if they have eaten a power-up. You use conditional statements to help applications make these kind of decisions.

if/else
if/else statements execute code based on a specific logical condition. You have a relatively simple either/or situation and depending on the result one branch of code or another (but not both) runs. Consider Knowhere, your small town from the previous chapter, and imagine that you need to buy stamps. Either Knowhere has a post office or it does not. If it has a post office, you will buy stamps there. If it does not have a post office, you will need to drive to the next town to buy stamps. Whether there is a post office is your logical condition. The different behaviors are “get stamps in town” and “get stamps out of town.”

Some situations are more complex than a binary yes/no. You will see a more flexible mechanism called switch in Chapter 5. But for now, let’s keep it simple.

Create a new OS X playground and name it Conditionals. Enter the code below, which shows the basic syntax for an if/else statement:

Listing 3.1 Big or small?
You first declare population as an instance of the Int type and then assign it a value of 5422. Next, you declare a variable called message that is of the String type. You leave this variable uninitialized at first, meaning that you do not assign it a value.

Next comes the conditional if/else statement. This is where message is assigned a value based on whether the “if” statement evaluates to true. (Notice that you use string interpolation to put the population into the message string.)

Figure 3.1 shows what your playground should look like. The console and the results sidebar show that message has been set to be equal to the string literal assigned when the conditional evaluates to true. How did this happen?
The condition in the if/else statement tests whether your town’s population is less than 10,000 via the < comparison operator. If the condition evaluates to true, then message is set to be equal to the first string literal (“X is a small town!”). If the condition evaluates to false – if the population is 10,000 or greater – the message is set to be equal to the second string literal (“X is pretty big!”). In this case, the town’s population is less than 10,000, so message is set to “5422 is a small town!”